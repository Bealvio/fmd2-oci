name: Build & Push
on:
  workflow_dispatch:
  push:
    tags:
      - '*.*.*'
jobs:
  buildpush:
    runs-on: 'bealv-runners'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set environment variables
        run: |
          echo "::add-mask::$REGISTRY_USER"
          echo "REGISTRY_USER=$REGISTRY_USER" >> $GITHUB_ENV
          echo "::add-mask::$REGISTRY_PASSWORD"
          echo "REGISTRY_PASSWORD=$REGISTRY_PASSWORD" >> $GITHUB_ENV
          echo "REGISTRY=zot.bealv.io" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV

          echo "::add-mask::$APP_ID"
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          while read -r line;
          do
            echo "::add-mask::${line}"
          done <<< "$APP_PRIVATE_KEY"
          echo "APP_PRIVATE_KEY=$APP_PRIVATE_KEY" | awk '{printf "%s\\n", $0}' >> $GITHUB_ENV
          NIXPKGS_URL=$(jq -r .pins.nixpkgs.url npins/sources.json)
          echo "" >> $GITHUB_ENV
          echo "NIX_PATH=nixpkgs=$NIXPKGS_URL" >> $GITHUB_ENV
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.APP_PRIVATE_KEY }}
      - name: 'Sync images'
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          $(nix-build . -A buildOciStream --argstr dockerVersion ${{ github.ref_name }}) > oci.tar
          IMAGE_FULLNAME=$(tar -axf oci.tar manifest.json -O |jq -r '.[0].RepoTags[0]')
          skopeo --version
          skopeo copy --insecure-policy --dest-creds \
          ${{ env.REGISTRY_USER }}:${{ env.REGISTRY_PASSWORD }} \
          docker-archive:oci.tar \
          docker://$IMAGE_FULLNAME

          DOCKER_IMAGE=$(echo "$IMAGE_FULLNAME" | sed s,$REGISTRY/public/fmd2-nix,$DOCKERHUB_USER/docker-fmd2,g)
          echo $DOCKER_IMAGE
          skopeo copy --insecure-policy --dest-creds \
          $DOCKERHUB_USER:$DOCKERHUB_PASSWORD \
          docker-archive:oci.tar \
          docker://$DOCKER_IMAGE
